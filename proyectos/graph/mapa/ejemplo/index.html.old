<!DOCTYPE html>
<meta charset="utf-8">
<style>
path {
  stroke: white;
  stroke-width: 0.25px;
  fill: grey;
}

.arc {
  fill: none;
  stroke: blue;
  stroke-width: 1px;
  stroke-linecap: round;
}


</style>
<body>
<script type="text/javascript" src="d3/d3.v3.js"></script>
<script src="http://d3js.org/d3.geo.projection.v0.min.js"></script>
<script src="http://d3js.org/topojson.v0.min.js"></script>
<script>
var width = 1280,
    height = 700;

var projection = d3.geo.mercator()
    //Espa√±a
    /*
    .center([-5,40])
    .scale(17000)
    .rotate([0,0]);
    */
    //mundo
    
    .center([-72, 51 ])
    .scale(1100)
    .rotate([0,0]);
    

var svg = d3.select("body").append("svg").attr("width", width).attr("height", height);

var path = d3.geo.path()
    .projection(projection);

var g = svg.append("g");

//Cargo en el array dataConexiones los datos del fichero con el nombre de los sitios y sus coordenadas
var dataConexiones = [];
d3.csv("sitios.csv", function(error, data) 
{
  dataConexiones = data.map(function(d) { return [ d.Nombre, d.Lat, d.Lon ]; });    
});

// Cargo el fichero con la topologia de todo el mundo y la muestro en SVG
d3.json("world-110m2.json", function(error, topology) {
    g.selectAll("path")
      .data(topojson.object(topology, topology.objects.countries)
          .geometries)
    .enter()
      .append("path")
      .attr("d", path)

    

    //Ahora miro en el fichero de conexiones cuales son las ciudades que estan enlazadas
    d3.csv("conexiones.csv", function(error, data) 
    {

      //Cargo en el array dataset todos los Origen,Destino de manera que:
      //dataset[x][0] <- origen
      //dataset[x][1] <- destino
      var dataset = [];
      for (var i=0; i<data.length; i++) {          
        dataset = data.map(function(d) { return [ d.Origen, d.Destino ]; });          
      }

      //Recorro la tabla con todos los datos Origen,Destino, y busco el nombre del origen y destino en el array de coordenadas de sitios
      //a traves de la funcion buscarCoordenadas
      for (var j=0; j< dataset.length; j++)
      {
        //console.log(dataset[j][0],dataset[j][1]);
        var coorOrigen = buscarCoordenada(dataset[j][0]);
        var coorDestino = buscarCoordenada(dataset[j][1]);
        //console.log(coorOrigen[0],coorOrigen[1],coorDestino[0],coorDestino[1]);
         
        g.append("path")          
          // A datum hay que pasarle el extremo origen y destino para que lo pinte
          .datum({
                  type: "LineString", 
                  coordinates: [[coorOrigen[0], coorOrigen[1]], [coorDestino[0], coorDestino[1]]]
                })
          .attr("class", "arc")
          .attr("d", path);
      } //Fin del for que recorre la tabla Origen,Destino
    }); // Fin de la funcion d3 que recorre el fichero CSV "conexiones.csv"

    //Dentro de la propia funcion utilizo el fichero de ciudades para pintarlas sobre el mapa
    d3.csv("sitios.csv", function(error, data) 
    {
      g.selectAll("circle")
        .data(data)
        .enter()
        .append("circle")
        .attr("cx", function(d) {
                 return projection([d.Lon, d.Lat])[0];
         })
        .attr("cy", function(d) {
                 return projection([d.Lon, d.Lat])[1];
         })
        .attr("r", 2)
        .style("fill", "red");
    }); //Fun de la funcion D3 que recorre el CSV "sitios.csv"

}); //Fin de la funcion d3 que recorre el JSON "world-110m2.json" con los datos de la cuidades


//Funcion auxiliar que se encarga de buscar una CIUDAD en la tabla "dataConexiones" que ya tenemos cargada con los datos de las ciudades
var buscarCoordenada = function (ciudad)
{
  busqueda = [];
  for (var i=0; i<dataConexiones.length; i++)
  {
    if (dataConexiones[i][0] === ciudad)
    {
      //console.log("He encontrado: "+dataConexiones[i][0]+ " en "+ dataConexiones[i][1] +" "+dataConexiones[i][2]);
      busqueda = [dataConexiones[i][2],dataConexiones[i][1]];
    }    
  }
  return busqueda;  
};

var zoom = d3.behavior.zoom()
    .on("zoom",function() 
    {
        g.attr("transform","translate("+ d3.event.translate.join(",")+")scale("+d3.event.scale+")");
        g.selectAll("path")  
            .attr("d", path.projection(projection));         
    });

svg.call(zoom)

</script>
</body>
</html>
